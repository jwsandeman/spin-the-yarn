// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
  Project  Project[]
  Note     Note[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum Status {
  DISCOVERY
  PLOTTING
  BLOCKING
  DRAFTING
  EDITING
  FINISHED
  PUBLISHED
  ONHOLD
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  published Boolean
  wordCount Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  status    Status   @default(DISCOVERY)
}

model Note {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String
  published      Boolean
  wordCount      Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  noteTemplate   NoteTemplate @relation(fields: [noteTemplateId], references: [id])
  noteTemplateId Int
  parents        NoteParent[]
  NoteEntry      NoteEntry[]
}

model NoteParent {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  parentId   Int
  parentType String
  note       Note     @relation(fields: [noteId], references: [id])
  noteId     Int

  // need to figure out why this isnt working with unique
  // @@index([noteId, parentId, parentType], unique: true)
  @@index([noteId, parentId, parentType])
}

model NoteTemplate {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  published    Boolean
  notes        Note[]
  NoteProperty NoteProperty[]
}

model NoteEntry {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  published      Boolean       @default(false)
  wordCount      Int
  note           Note          @relation(fields: [noteId], references: [id])
  noteId         Int
  noteProperty   NoteProperty? @relation(fields: [notePropertyId], references: [id])
  notePropertyId Int
}

model NoteProperty {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String
  noteTemplate   NoteTemplate @relation(fields: [noteTemplateId], references: [id])
  noteTemplateId Int
  NoteEntry      NoteEntry[]
}
